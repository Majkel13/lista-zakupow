{"version":3,"sources":["components/NewItemForm.js","components/List.js","App.js","serviceWorker.js","index.js"],"names":["Button","styled","button","_templateObject","TextInput","input","_templateObject2","Container","div","_templateObject3","NewItemForm","_ref","onSubmit","onChange","draft","onKeyPress","react_default","a","createElement","type","value","onClick","List_templateObject","Header","h1","List_templateObject2","Delete","List_templateObject3","Row","_templateObject4","Item","_templateObject5","props","done","List","state","tasks","_this","updateDraft","event","setState","target","addItem","_this$state","listToUpdate","id","length","push","text","ls","set","alert","addItemEnter","key","update","e","list","forEach","l","delete","updateList","filter","this","get","_this2","_this$state2","List_Container","map","task","title","components_NewItemForm","Component","defaultProps","App","components_List","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","StrictMode","src_App_0","document","getElementById","URL","process","href","origin","addEventListener","concat","fetch","headers","Service-Worker","response","contentType","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.fa7d774b.chunk.js","sourcesContent":["import React from 'react';\r\nimport styled from 'styled-components';\r\n\r\nconst Button = styled.button`\r\n    background: #232632;\r\n    color: #00a7fa;\r\n    width:80px;\r\n    /* height: 32px; */\r\n    font-size: 1.7em;\r\n    border: 0px;\r\n    display: flex;\r\n    justify-content:center;\r\n    align-items:center;\r\n    border-radius: 18px;\r\n`\r\nconst TextInput = styled.input`\r\n    padding: 5px;\r\n    font-size: 0.7em;\r\n    background: #232323;\r\n    color: #d3d4d6;\r\n    width: 100%;\r\n    margin-right: 7px;\r\n    border:0px;\r\n    -webkit-appearance: none;\r\n    border-radius: 18px;\r\n`\r\nconst Container = styled.div`\r\n    display:flex;\r\n    justify-content: space-between;\r\n    border:2px solid #00a7fa;\r\n    border-radius: 18px;\r\n    padding: 5px;\r\n    background: #232323;\r\n`\r\n\r\nconst NewItemForm = ({onSubmit, onChange, draft, onKeyPress}) =>(\r\n    <Container>\r\n        <TextInput type='text' value={draft} onChange={onChange} onKeyPress={onKeyPress} />\r\n        <Button onClick={onSubmit}>+</Button>\r\n    </Container>\r\n)\r\nexport default NewItemForm","import React, { Component } from 'react';\r\nimport NewItemForm from './NewItemForm';\r\nimport styled from 'styled-components';\r\nimport ls from 'local-storage';\r\n\r\nconst Container = styled.div`\r\nbackground: #2f2143;\r\nwidth: 80%;\r\nmargin: 0 auto;\r\nborder-radius: 25px;\r\npadding: 20px;\r\nmargin-top: 30px;\r\nmax-width: 680px;\r\n`\r\n\r\nconst Header = styled.h1`\r\n color: #00a7fa; \r\n text-align:center;\r\n`\r\nconst Delete = styled.div`\r\ncolor: #b13418;\r\n\r\n\r\n:hover{\r\n    color: #dd1111;\r\n    cursor: pointer;\r\n}\r\n`\r\nconst Row = styled.div`\r\ndisplay: flex;\r\njustify-content: space-between;\r\nbackground: #343744;\r\nborder-radius: 10px;\r\npadding: 14px;\r\nmargin-bottom: 7px;\r\nmargin-top: 7px;\r\n`\r\nconst Item = styled.div`\r\n\r\ncursor: pointer;\r\ncolor: ${props => props.done ? 'black' : '#d572a0'};\r\ntext-decoration: ${props => props.done ? `line-through` : 'auto'};\r\n`\r\n\r\n\r\nclass List extends Component{\r\n\r\n\r\n    static defaultProps = {\r\n        tasks : [\r\n           \r\n        ]\r\n    }\r\n\r\n    state={\r\n        tasks : this.props.tasks,\r\n        draft: ''\r\n    }\r\n\r\n    componentDidMount(){\r\n        this.setState({tasks: ls.get('tasks') || []})\r\n    }\r\n\r\n    updateDraft = event => {\r\n        this.setState({draft: event.target.value})\r\n    }\r\n    \r\n   addItem = () => {\r\n    const {tasks, draft} = this.state;\r\n\r\n    if(draft !== ''){\r\n        const  listToUpdate = tasks;\r\n        let id=1;        \r\n\r\n        if(listToUpdate.length-1>=0){\r\n            let lastElem =listToUpdate[listToUpdate.length-1];\r\n            id= lastElem.id+1;\r\n        }\r\n        \r\n        listToUpdate.push({text: draft, done: false, id: id});\r\n        this.setState({tasks: listToUpdate, draft: ''});\r\n        ls.set('tasks', tasks);\r\n\r\n    }else{\r\n        alert(\"Pole nie może być puste\");\r\n    }\r\n   \r\n}\r\naddItemEnter = event =>{\r\n    if(event.key === 'Enter'){\r\n        this.addItem();\r\n    }\r\n}\r\nupdate = (e,id) => {\r\n        const {tasks} = this.state;\r\n        const list = tasks;\r\n        list.forEach(l => {\r\n            if(id===l.id){\r\n                 \r\n                 l.done= !l.done\r\n               \r\n             }  \r\n        });\r\n             this.setState({tasks: list});\r\n             ls.set('tasks', tasks);\r\n}\r\n\r\n    delete = (e,id) =>{\r\n        const {tasks} = this.state;\r\n        const list = tasks;\r\n       var updateList = list.filter(function(value){ return value.id !== id;});\r\n       this.setState({tasks: updateList});\r\n       ls.set('tasks', updateList);\r\n    }\r\n    render(){\r\n        const{tasks, draft} = this.state;\r\n        return(\r\n            <Container>\r\n                <Header key=\"\">Lista zakupów</Header>\r\n                {tasks.map(task => \r\n                <Row key={task.id}  >\r\n                    <Item  onClick={(e) => this.update(e, task.id)}  done={task.done} title=\"Oznacz jeśli kupione\">{task.text}</Item>\r\n                    <Delete  onClick={(e) => this.delete(e, task.id)}>usuń</Delete>\r\n                </Row>)}\r\n                <NewItemForm onSubmit={this.addItem} onChange={this.updateDraft} onKeyPress={this.addItemEnter} draft={draft}/>\r\n            </Container>\r\n        );\r\n    }\r\n} \r\n\r\nexport default List;","import React, { Component } from 'react';\nimport './App.css';\nimport List from './components/List';\n\n\nclass App extends Component{\n  render(){\n    return(\n      <List />\n    )\n  }\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}