{"version":3,"sources":["components/ItemList.js","components/NewItemForm.js","components/List.js","App.js","serviceWorker.js","index.js"],"names":["Item","styled","div","_templateObject","props","done","ItemList","state","_this","toggleDone","setState","text","this","react_default","a","createElement","onClick","title","Component","defaultProps","Button","button","NewItemForm_templateObject","TextInput","input","_templateObject2","Container","_templateObject3","NewItemForm","_ref","onSubmit","onChange","draft","onKeyPress","type","value","List_templateObject","Header","h1","List_templateObject2","Delete","List_templateObject3","Row","_templateObject4","List","tasks","updateDraft","event","target","addItem","_this$state","listToUpdate","id","length","push","alert","addItemEnter","key","delete","e","updateList","filter","_this2","_this$state2","List_Container","map","task","components_ItemList","components_NewItemForm","App","components_List","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.2b85f63a.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport styled from 'styled-components';\r\n\r\nconst Item = styled.div`\r\n\r\ncursor: pointer;\r\ncolor: ${props => props.done ? 'black' : '#d572a0'};\r\ntext-decoration: ${props => props.done ? `line-through` : 'auto'};\r\n`\r\n\r\nclass ItemList extends Component{\r\n\r\n    static defaultProps = {\r\n        done: false\r\n    }\r\n\r\n    state={\r\n        done: this.props.done\r\n    }\r\n\r\n    toggleDone = ()=>{\r\n        this.setState({done: !this.state.done})\r\n    }\r\n\r\n    render(){\r\n        const {text} = this.props;\r\n        return(\r\n        <Item onClick={this.toggleDone} done={this.state.done} title=\"Oznacz jeśli kupione\">{text}</Item>\r\n        )\r\n    }\r\n}\r\n\r\nexport default ItemList","import React from 'react';\r\nimport styled from 'styled-components';\r\n\r\nconst Button = styled.button`\r\n    background: #232632;\r\n    color: #00a7fa;\r\n    width:80px;\r\n    /* height: 32px; */\r\n    font-size: 1.7em;\r\n    border: 0px;\r\n    display: flex;\r\n    justify-content:center;\r\n    align-items:center;\r\n    border-radius: 18px;\r\n`\r\nconst TextInput = styled.input`\r\n    padding: 5px;\r\n    font-size: 0.7em;\r\n    background: #232323;\r\n    color: #d3d4d6;\r\n    width: 100%;\r\n    margin-right: 7px;\r\n    border:0px;\r\n    -webkit-appearance: none;\r\n    border-radius: 18px;\r\n`\r\nconst Container = styled.div`\r\n    display:flex;\r\n    justify-content: space-between;\r\n    border:2px solid #00a7fa;\r\n    border-radius: 18px;\r\n    padding: 5px;\r\n    background: #232323;\r\n`\r\n\r\nconst NewItemForm = ({onSubmit, onChange, draft, onKeyPress}) =>(\r\n    <Container>\r\n        <TextInput type='text' value={draft} onChange={onChange} onKeyPress={onKeyPress} />\r\n        <Button onClick={onSubmit}>+</Button>\r\n    </Container>\r\n)\r\nexport default NewItemForm","import React, { Component } from 'react';\r\nimport ItemList from './ItemList';\r\nimport NewItemForm from './NewItemForm';\r\nimport styled from 'styled-components'\r\n\r\nconst Container = styled.div`\r\nbackground: #2f2143;\r\nwidth: 80%;\r\nmargin: 0 auto;\r\nborder-radius: 25px;\r\npadding: 20px;\r\nmargin-top: 30px;\r\nmax-width: 680px;\r\n`\r\n\r\nconst Header = styled.h1`\r\n color: #00a7fa; \r\n text-align:center;\r\n`\r\nconst Delete = styled.div`\r\ncolor: #b13418;\r\n\r\n\r\n:hover{\r\n    color: #dd1111;\r\n    cursor: pointer;\r\n}\r\n`\r\nconst Row = styled.div`\r\ndisplay: flex;\r\njustify-content: space-between;\r\nbackground: #343744;\r\nborder-radius: 10px;\r\npadding: 14px;\r\nmargin-bottom: 7px;\r\nmargin-top: 7px;\r\n`\r\n\r\n\r\n\r\nclass List extends Component{\r\n\r\n\r\n    static defaultProps = {\r\n        tasks : [\r\n           \r\n        ]\r\n    }\r\n\r\n    state={\r\n        tasks : this.props.tasks,\r\n        draft: ''\r\n    }\r\n\r\n    updateDraft = event => {\r\n        this.setState({draft: event.target.value})\r\n    }\r\n    \r\n   addItem = () => {\r\n    const {tasks, draft} = this.state;\r\n\r\n    if(draft !== ''){\r\n        const  listToUpdate = tasks;\r\n        let id=1;        \r\n\r\n        if(listToUpdate.length-1>=0){\r\n            let lastElem =listToUpdate[listToUpdate.length-1];\r\n            id= lastElem.id+1;\r\n        }\r\n        \r\n        listToUpdate.push({text: draft, done: false, id: id});\r\n        this.setState({tasks: listToUpdate, draft: ''});\r\n\r\n    }else{\r\n        alert(\"Pole nie może być puste\");\r\n    }\r\n   \r\n}\r\naddItemEnter = event =>{\r\n    if(event.key === 'Enter'){\r\n        this.addItem();\r\n    }\r\n}\r\n\r\n    delete = (e,id) =>{\r\n        const {tasks} = this.state;\r\n        const list = tasks;\r\n       var updateList = list.filter(function(value){ return value.id !== id;});\r\n       this.setState({tasks: updateList});\r\n    }\r\n    render(){\r\n        const{tasks, draft} = this.state;\r\n        return(\r\n            <Container>\r\n                <Header key=\"\">Lista zakupów</Header>\r\n                {tasks.map(task => \r\n                <Row key={task.id}  >\r\n                    <ItemList id={task.id} text={task.text} done={task.done}/>\r\n                    <Delete  onClick={(e) => this.delete(e, task.id)}>usuń</Delete>\r\n                </Row>)}\r\n                <NewItemForm onSubmit={this.addItem} onChange={this.updateDraft} onKeyPress={this.addItemEnter} draft={draft}/>\r\n            </Container>\r\n        );\r\n    }\r\n} \r\n\r\nexport default List;","import React, { Component } from 'react';\nimport './App.css';\nimport List from './components/List';\n\n\nclass App extends Component{\n  render(){\n    return(\n      <List />\n    )\n  }\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}